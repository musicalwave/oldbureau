// Generated by CoffeeScript 1.4.0
(function() {
  var Alissa, Daemon, Greg, Looks, Octo, Reg, getGreg, getJAlissas, m, now, trim;

  m = jQuery;

  now = function() {
    return Date.now();
  };

  getJAlissas = function() {
    return m('[model-id]');
  };

  trim = function() {
    return getJAlissas().each(function() {
      return this.value = this.value.trim();
    });
  };

  Looks = {
    Clear: '',
    Transition: 'inTransit',
    Synced: 'synced'
  };

  Window.Reg = [];

  Reg = Window.Reg;

  Octo = {
    getJAlissas: function() {
      return m('.cool');
    }
  };

  getGreg = function(alissa) {
    var id;
    id = alissa.getId();
    if (Reg[id] === void 0) {
      return Reg[id] = new Greg(id, alissa);
    } else {
      return Reg[id];
    }
  };

  Greg = (function() {

    function Greg(id, lisa) {
      this.id = id;
      this.lisa = lisa;
      this.timeStamp = now();
      this.val = '';
    }

    Greg.prototype.fireUpdateClient = function() {
      return this.lisa.onUpdateFromServer(this);
    };

    Greg.prototype.fireUpdateServer = function() {
      return Daemon.onUpdateServer(this);
    };

    Greg.prototype.onValueChangedFromClient = function(val) {
      this.val = val;
      this.timeStamp = now();
      return this.fireUpdateServer();
    };

    Greg.prototype.onUpdateFromServer = function(update) {
      if (update.timeStamp > this.timeStamp) {
        this.timeStamp = update.timeStamp;
        this.val = update.comment;
        return this.fireUpdateClient();
      }
    };

    Greg.prototype.onSendSucceeded = function() {
      return this.lisa.onValueSynced();
    };

    return Greg;

  })();

  Alissa = (function() {

    function Alissa(jElement) {
      this.setE(jElement);
      this.connect();
    }

    Alissa.prototype.bindEvents = function() {
      var _this = this;
      return this.e.on('keydown', function() {
        return _this.onKD();
      }).on('paste', function() {
        return _this.onKD();
      });
    };

    Alissa.prototype.connect = function() {
      return this.greg = getGreg(this);
    };

    Alissa.prototype.fireValueChangedFromServer = function() {};

    Alissa.prototype.getId = function() {
      return this.e.attr('model-id');
    };

    Alissa.prototype.getTimeStamp = function() {
      var time;
      time = this.e.attr('model-timeStamp');
      if (time != null) {
        if (time instanceof Number) {
          return time;
        } else {
          return parseInt(time);
        }
      } else {
        return 0;
      }
    };

    Alissa.prototype.getVal = function() {
      return this.e.val();
    };

    Alissa.prototype.onKD = function() {
      var oldState,
        _this = this;
      oldState = this.getVal();
      return setTimeout(function() {
        var newState;
        newState = _this.getVal();
        if (newState !== oldState) {
          return _this.onValueChanged();
        }
      }, 5);
    };

    Alissa.prototype.onUpdateFromServer = function(greg) {
      this.setLook(Looks.Synced);
      if (greg.timeStamp > this.getTimeStamp()) {
        this.setTimeStamp(greg.timeStamp);
        this.setVal(greg.val);
        return this.fireValueChangedFromServer();
      }
    };

    Alissa.prototype.onValueChanged = function() {
      this.setTimeStamp(now());
      this.setLook(Looks.Transition);
      return this.greg.onValueChangedFromClient(this.getVal());
    };

    Alissa.prototype.onValueSynced = function() {
      return this.setLook(Looks.Synced);
    };

    Alissa.prototype.resetLook = function() {
      var _this = this;
      if (this.lookResetTimeoutId != null) {
        clearTimeout(this.lookResetTimeoutId);
      }
      return this.lookResetTimeoutId = setTimeout(function() {
        _this.lookResetTimeoutId = null;
        return _this.setLook(Looks.Clear);
      }, 3000);
    };

    Alissa.prototype.setE = function(jElement) {
      this.e = jElement;
      return this.bindEvents();
    };

    Alissa.prototype.setLook = function(Look) {
      switch (Look) {
        case Looks.Clear:
          this.e.removeClass(Looks.Synced);
          return this.e.removeClass(Looks.Transition);
        case Looks.Synced:
          this.e.removeClass(Looks.Transition);
          this.e.addClass(Looks.Synced);
          return this.resetLook();
        case Looks.Transition:
          this.e.removeClass(Looks.Synced);
          return this.e.addClass(Looks.Transition);
      }
    };

    Alissa.prototype.setTimeStamp = function(timeStamp) {
      if (timeStamp == null) {
        timeStamp = now();
      }
      return this.e.attr('model-timeStamp', timeStamp);
    };

    Alissa.prototype.setVal = function(v) {
      return this.e.val(v);
    };

    return Alissa;

  })();

  Daemon = {
    cache: [],
    onUpdateServer: function(greg) {
      return this.cache[greg.id] = greg;
    },
    onUpdates: function(updates) {
      var update, _i, _len;
      for (_i = 0, _len = updates.length; _i < _len; _i++) {
        update = updates[_i];
        try {
          Reg[update.id].onUpdateFromServer(update);
        } catch (_error) {}
      }
    },
    pull: function() {
      var self;
      self = this;
      return m.ajax({
        url: pullUrl,
        data: {
          timeStamp: now() - 5000
        },
        success: function(data) {
          if (data.updates != null) {
            return self.onUpdates(data.updates);
          }
        }
      });
    },
    push: function() {
      var cache, greg, key, len, _results;
      cache = this.cache;
      len = cache.length;
      if (len === 0) {
        return;
      }
      this.cache = [];
      _results = [];
      for (key in cache) {
        greg = cache[key];
        _results.push(this.send(greg));
      }
      return _results;
    },
    send: function(greg) {
      var self;
      self = this;
      return m.ajax({
        url: pushUrl,
        type: 'POST',
        data: {
          id: greg.id,
          comment: greg.val,
          timeStamp: greg.timeStamp
        },
        success: function() {
          return greg.onSendSucceeded();
        },
        error: function() {
          return self.cache[greg.id] = greg;
        }
      });
    },
    wakeup: function() {
      var _this = this;
      this.pushTimerId = setInterval(function() {
        return _this.push();
      }, 1000);
      this.pullTimerId = setInterval(function() {
        return _this.pull();
      }, 5000);
      return setTimeout(function() {
        return location.reload();
      }, 600000);
    }
  };

  this.ignite = function() {
    var jAlissa, _i, _len, _ref;
    window.pushUrl = m('#aj').attr('href');
    window.pullUrl = m('#ajpoll').attr('href');
    trim();
    _ref = Octo.getJAlissas();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      jAlissa = _ref[_i];
      new Alissa(m(jAlissa));
    }
    return Daemon.wakeup();
  };

  m(ignite);

}).call(this);
